### A Pluto.jl notebook ###
# v0.12.3

using Markdown
using InteractiveUtils

# ╔═╡ 630d4620-482b-11eb-1815-afdc551c9d04
begin
	using Plots
	using Flux
end

# ╔═╡ 2004a120-482b-11eb-02ff-c34d18dc9330
md"
# Model Automatic Differentiation
"

# ╔═╡ 300b1b82-482b-11eb-335a-976ddcd18429
md"
## MCVE
"

# ╔═╡ 897398a0-482b-11eb-33f4-93771fcfb1dd
md"
Suppose our data is generated by the following formula:

$y = 6.2x + 11$
"

# ╔═╡ 84749360-482e-11eb-0312-0fa3a6b7a36e
begin
	source(x) = (6.2 .* x) .+ 11
end

# ╔═╡ 5fbadf70-482e-11eb-14b3-6be2a09a63bd
md"
### Model
"

# ╔═╡ 682da750-482e-11eb-394c-710c7a75eb7b
begin
	m = rand(1)
	c = rand(1)
	model(x) = (m .* x) .+ c
end

# ╔═╡ bd711890-483e-11eb-2b88-1d627180242d
rand(-1:1, 5)

# ╔═╡ db6d7010-482e-11eb-08c3-efdd35a555fd
md"
### AD
"

# ╔═╡ e37d0950-482e-11eb-1ce7-455fbf738f10
begin
	loss(x, y) = Flux.Losses.mse(model(x), y)
	opt = ADAM(0.001)
end

# ╔═╡ 66daa4fe-482f-11eb-284d-793d1d38df6c
begin
	x = rand(-2000:2000, 20000)
	y = source(x)
	data = Flux.Data.DataLoader(x, y, batchsize=128)
end

# ╔═╡ 6ce7e0c0-483e-11eb-0efa-619081fbc914
m, c

# ╔═╡ b5ef48c0-4830-11eb-23f8-6376f38dddb6
@Flux.epochs 100 Flux.train!(loss, params([m, c]), data, opt)

# ╔═╡ e76255a0-4835-11eb-047d-f94efa2bedfd
m, c

# ╔═╡ 729aec60-483e-11eb-0f1e-e9e484cafff6
source(10), model(10)

# ╔═╡ Cell order:
# ╟─2004a120-482b-11eb-02ff-c34d18dc9330
# ╠═630d4620-482b-11eb-1815-afdc551c9d04
# ╟─300b1b82-482b-11eb-335a-976ddcd18429
# ╟─897398a0-482b-11eb-33f4-93771fcfb1dd
# ╠═84749360-482e-11eb-0312-0fa3a6b7a36e
# ╟─5fbadf70-482e-11eb-14b3-6be2a09a63bd
# ╠═682da750-482e-11eb-394c-710c7a75eb7b
# ╠═bd711890-483e-11eb-2b88-1d627180242d
# ╟─db6d7010-482e-11eb-08c3-efdd35a555fd
# ╠═e37d0950-482e-11eb-1ce7-455fbf738f10
# ╠═66daa4fe-482f-11eb-284d-793d1d38df6c
# ╠═6ce7e0c0-483e-11eb-0efa-619081fbc914
# ╠═b5ef48c0-4830-11eb-23f8-6376f38dddb6
# ╠═e76255a0-4835-11eb-047d-f94efa2bedfd
# ╠═729aec60-483e-11eb-0f1e-e9e484cafff6
